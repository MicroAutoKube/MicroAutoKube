(()=>{var e={};e.id=824,e.ids=[824],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},11723:e=>{"use strict";e.exports=require("querystring")},12412:e=>{"use strict";e.exports=require("assert")},28354:e=>{"use strict";e.exports=require("util")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33196:(e,r,t)=>{"use strict";t.d(r,{z:()=>o});var s=t(96330);let i=global.prisma??new s.PrismaClient({log:["query","info","warn","error"]});(async()=>{console.log("\uD83D\uDD04 Testing Prisma database connection...");try{await i.$connect(),console.log("✅ Prisma database connected successfully!")}catch(e){console.error("❌ Prisma database connection failed:",e)}})();let o=i},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},55591:e=>{"use strict";e.exports=require("https")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},66128:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>g,routeModule:()=>p,serverHooks:()=>f,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>x});var s={};t.r(s),t.d(s,{PUT:()=>l});var i=t(96559),o=t(48088),a=t(37719),u=t(32190),n=t(33196),c=t(19854);async function l(e){try{let r=await (0,c.getServerSession)();if(!r?.user?.email)return u.NextResponse.json({error:"Unauthorized"},{status:401});let t=new URL(e.url).pathname.split("/").pop();if(!t)return u.NextResponse.json({error:"Missing cluster ID"},{status:400});let s=await e.json(),i=await n.z.user.findUnique({where:{email:r.user.email}});if(!i)return u.NextResponse.json({error:"User not found"},{status:404});if(!await n.z.clusterProfile.findFirst({where:{id:t,userId:i.id},include:{clusterConfig:{include:{helm:!0,registry:!0,metrics:!0,localPathProvisioner:!0}}}}))return u.NextResponse.json({error:"Cluster not found or unauthorized"},{status:404});let o=await n.z.clusterConfig.upsert({where:{clusterProfileId:t},update:{helm:{upsert:{create:{enabled:s.helm.enabled},update:{enabled:s.helm.enabled}}},registry:{upsert:{create:s.registry,update:s.registry}},metrics:{upsert:{create:s.metrics,update:s.metrics}},localPathProvisioner:{upsert:{create:s.localPathProvisioner,update:s.localPathProvisioner}}},create:{clusterProfileId:t,helm:{create:{enabled:s.helm.enabled}},registry:{create:s.registry},metrics:{create:s.metrics},localPathProvisioner:{create:s.localPathProvisioner}}});return u.NextResponse.json({success:!0,config:o},{status:200})}catch(e){return console.error("PUT /cluster-config error:",e),u.NextResponse.json({error:"Failed to update configuration"},{status:500})}finally{await n.z.$disconnect()}}let p=new i.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/clusters/config/[clusterId]/route",pathname:"/api/clusters/config/[clusterId]",filename:"route",bundlePath:"app/api/clusters/config/[clusterId]/route"},resolvedPagePath:"/Users/mewpk/Desktop/Project/MicroAutoKube/dashboard-autokube/src/app/api/clusters/config/[clusterId]/route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:d,workUnitAsyncStorage:x,serverHooks:f}=p;function g(){return(0,a.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:x})}},74075:e=>{"use strict";e.exports=require("zlib")},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},79551:e=>{"use strict";e.exports=require("url")},81630:e=>{"use strict";e.exports=require("http")},94735:e=>{"use strict";e.exports=require("events")},96330:e=>{"use strict";e.exports=require("@prisma/client")},96487:()=>{}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[719,854,580],()=>t(66128));module.exports=s})();